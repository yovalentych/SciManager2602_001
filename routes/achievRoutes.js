const express = require('express');
const router = express.Router();
const Achievement = require('../models/Achievement');
const { checkAuth } = require('../middleware/authMiddleware');
const upload = require('../middleware/uploadMiddleware');

// üìå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤ –∞–±–æ —Ñ–æ—Ç–æ –ø–æ–¥—ñ—ó
router.post('/upload', checkAuth, upload.single('image'), (req, res) => {
  try {
    res.json({ imageUrl: `/uploads/${req.file.filename}` });
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É', error });
  }
});

// üìå –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
router.post('/', checkAuth, async (req, res) => {
  try {
    const { certificates, eventPhotos, ...data } = req.body;

    const newAchievement = new Achievement({
      userId: req.user.id,
      ...data,
      certificates: certificates ? certificates.split(',') : [],
      eventPhotos: eventPhotos ? eventPhotos.split(',') : [],
    });

    await newAchievement.save();
    res.status(201).json(newAchievement);
  } catch (error) {
    res
      .status(500)
      .json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è', error });
  }
});

// üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get('/', checkAuth, async (req, res) => {
  try {
    const achievements = await Achievement.find({ userId: req.user.id }).sort({
      date: -1,
    });
    res.json(achievements);
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω—å', error });
  }
});

// üìå –û–Ω–æ–≤–∏—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
router.put('/:id', checkAuth, async (req, res) => {
  try {
    const achievement = await Achievement.findById(req.params.id);
    if (!achievement || achievement.userId.toString() !== req.user.id) {
      return res.status(403).json({ message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è' });
    }

    const { certificates, eventPhotos, ...data } = req.body;
    achievement.certificates = certificates
      ? certificates.split(',')
      : achievement.certificates;
    achievement.eventPhotos = eventPhotos
      ? eventPhotos.split(',')
      : achievement.eventPhotos;

    Object.assign(achievement, data);
    await achievement.save();

    res.json(achievement);
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ', error });
  }
});

// üìå –í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
router.delete('/:id', checkAuth, async (req, res) => {
  try {
    const achievement = await Achievement.findById(req.params.id);
    if (!achievement || achievement.userId.toString() !== req.user.id) {
      return res.status(403).json({ message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è' });
    }
    await achievement.remove();
    res.json({ message: '–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ', error });
  }
});

module.exports = router;
