const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const { checkAuth } = require('../middleware/authMiddleware'); // –û–Ω–æ–≤–ª–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
const multer = require('multer');
const moment = require('moment');

const router = express.Router();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è multer –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–æ–∫
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'public/uploads/'); // –û–Ω–æ–≤–ª–µ–Ω–æ
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  },
});
const upload = multer({ storage });

// üìå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.post('/register', async (req, res) => {
  try {
    const {
      username,
      email,
      password,
      firstNameUa,
      lastNameUa,
      firstNameEn,
      lastNameEn,
    } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
    const existingUser = await User.findOne({ $or: [{ email }, { username }] });
    if (existingUser) {
      return res
        .status(400)
        .json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –∞–±–æ username –≤–∂–µ —ñ—Å–Ω—É—î' });
    }

    // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const newUser = new User({
      username,
      email,
      password: hashedPassword,
      firstNameUa,
      lastNameUa,
      firstNameEn,
      lastNameEn,
      lastNameChangeDate: new Date(),
    });

    await newUser.save();
    res.status(201).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ' });
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

// üìå –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.post('/login', async (req, res) => {
  try {
    const { emailOrUsername, password } = req.body;

    // –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = await User.findOne({
      $or: [{ email: emailOrUsername }, { username: emailOrUsername }],
    });

    if (!user) {
      return res.status(400).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å' });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è JWT
    const token = jwt.sign(
      { userId: user._id, username: user.username },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({ token, message: '–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π' });
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

// üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
router.get('/profile', checkAuth, async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).select('-password');
    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
router.put('/profile', checkAuth, async (req, res) => {
  try {
    const {
      firstNameUa,
      lastNameUa,
      firstNameEn,
      lastNameEn,
      affiliation,
      position,
      website,
      socialLinks,
      password,
    } = req.body;
    const user = await User.findById(req.user.userId);

    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    let updateFields = { affiliation, position, website, socialLinks };

    // üìå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–∏ —ñ–º–µ–Ω—ñ —Ä–∞–∑ –Ω–∞ –º—ñ—Å—è—Ü—å
    if (firstNameUa || lastNameUa || firstNameEn || lastNameEn) {
      const lastUpdated = moment(user.lastNameChangeDate);
      const oneMonthAgo = moment().subtract(1, 'months');

      if (lastUpdated.isAfter(oneMonthAgo)) {
        return res.status(400).json({
          message: "–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ –º—ñ—Å—è—Ü—å",
        });
      }

      updateFields.firstNameUa = firstNameUa || user.firstNameUa;
      updateFields.lastNameUa = lastNameUa || user.lastNameUa;
      updateFields.firstNameEn = firstNameEn || user.firstNameEn;
      updateFields.lastNameEn = lastNameEn || user.lastNameEn;
      updateFields.lastNameChangeDate = new Date();
    }

    // üìå –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å
    if (password) {
      const salt = await bcrypt.genSalt(10);
      updateFields.password = await bcrypt.hash(password, salt);
    }

    // üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const updatedUser = await User.findByIdAndUpdate(
      req.user.userId,
      updateFields,
      { new: true }
    ).select('-password');

    res.json({ message: '–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ', user: updatedUser });
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

module.exports = router;
